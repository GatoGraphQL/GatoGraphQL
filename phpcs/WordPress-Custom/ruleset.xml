<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="WordPress Custom" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">

	<description>Custom sniff rules for WordPress plugins</description>

	<!-- <rule ref="WordPress.Security.EscapeOutput"/> -->

	<!-- Encourage use of wp_safe_redirect() to avoid open redirect vulnerabilities.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/1264 -->
	<rule ref="WordPress.Security.SafeRedirect"/>

	<!-- Verify that a nonce check is done before using values in superglobals.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/73 -->
	<rule ref="WordPress.Security.NonceVerification"/>

	<!-- <rule ref="WordPress.PHP.DevelopmentFunctions"/> -->
	<!-- <rule ref="WordPress.PHP.DiscouragedPHPFunctions"/> -->
	<!-- <rule ref="WordPress.WP.DeprecatedFunctions"/> -->
	<!-- <rule ref="WordPress.WP.DeprecatedClasses"/> -->
	<!-- <rule ref="WordPress.WP.DeprecatedParameters"/> -->
	<!-- <rule ref="WordPress.WP.DeprecatedParameterValues"/> -->
	<!-- <rule ref="WordPress.WP.AlternativeFunctions"/> -->
	<!-- <rule ref="WordPress.WP.DiscouragedConstants"/> -->
	<!-- <rule ref="WordPress.WP.DiscouragedFunctions"/> -->

	<!-- Verify that capabilities are being used correctly. -->
	<!-- <rule ref="WordPress.WP.Capabilities"/> -->

	<!-- Scripts & style should be enqueued.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/35 -->
	<!-- <rule ref="WordPress.WP.EnqueuedResources"/> -->

	<!-- Warn against overriding WP global variables.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/26 -->
	<!-- <rule ref="WordPress.WP.GlobalVariablesOverride"/> -->

	<!-- Detect incorrect or risky use of the `ini_set()` function.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/1447 -->
	<!-- <rule ref="WordPress.PHP.IniSet"/> -->

	<!-- Check enqueue and register styles and scripts to have version and in_footer parameters explicitly set.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/1146 -->
	<!-- <rule ref="WordPress.WP.EnqueuedResourceParameters"/> -->

	<!-- Make the translators comment check which is included in core stricter. -->
	<!-- <rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
		<type>error</type>
	</rule> -->
	<!-- <rule ref="WordPress.WP.I18n.TranslatorsCommentWrongStyle">
		<type>error</type>
	</rule> -->

	<!-- Verify that everything in the global namespace is prefixed. -->
	<!-- <rule ref="WordPress.NamingConventions.PrefixAllGlobals"/> -->

	<!-- Validates post type slugs for valid characters, length and reserved keywords. -->
	<!-- <rule ref="WordPress.NamingConventions.ValidPostTypeSlug"/> -->

	<!-- https://github.com/WordPress/WordPress-Coding-Standards/issues/1157 -->
	<!-- <rule ref="WordPress.Security.PluginMenuSlug"/> -->
	<!-- <rule ref="WordPress.WP.CronInterval"/> -->
	<!-- <rule ref="WordPress.WP.PostsPerPage"/> -->

	<!-- Verify some regex best practices.
		 https://github.com/WordPress/WordPress-Coding-Standards/issues/1371 -->
	<!-- <rule ref="WordPress.PHP.PregQuoteDelimiter"/> -->

	<!-- The Core ruleset respects the PHP allowed functions list. For `Extra` the sniff is stricter.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/1450 -->
	<!-- <rule ref="WordPress.PHP.NoSilencedErrors">
		<properties>
			<property name="usePHPFunctionsList" value="false"/>
		</properties>
	</rule> -->

	<!-- Prevent some typical mistakes people make accidentally.
		 https://github.com/WordPress/WordPress-Coding-Standards/pull/1777 -->
	<!-- <rule ref="WordPress.CodeAnalysis.EscapedNotTranslated"/> -->

</ruleset>
