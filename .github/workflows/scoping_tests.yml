####################################################################################
# GitHub Action:
# Test that scoping the plugins works well
####################################################################################
name: Scoping tests
on:
    push:
        branches:
            - master
            - versions/*
    pull_request: null

env:
    CHECKOUT_SUBMODULES: ""
    # see https://github.com/composer/composer/issues/9368#issuecomment-718112361
    COMPOSER_ROOT_VERSION: dev-master

jobs:
    provide_data:
        name: Provide configuration of scoped releases
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v4
                with:
                    submodules: ${{ env.CHECKOUT_SUBMODULES }}

            -   uses: shivammathur/setup-php@v2
                with:
                    php-version: 8.1
                    coverage: none
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   uses: ramsey/composer-install@v3

            -   id: output_data
                run: |
                    echo "plugin_config_entries=$(vendor/bin/monorepo-builder plugin-config-entries-json --config=config/monorepo-builder/plugin-config-entries-json.php --scoped-only)" >> $GITHUB_OUTPUT
                    echo "git_base_branch=$(vendor/bin/monorepo-builder env-var GIT_BASE_BRANCH --config=config/monorepo-builder/env-var.php)" >> $GITHUB_OUTPUT
        outputs:
            plugin_config_entries: ${{ steps.output_data.outputs.plugin_config_entries }}
            git_base_branch: ${{ steps.output_data.outputs.git_base_branch }}

    main:
        needs: provide_data
        if: needs.provide_data.outputs.plugin_config_entries != '[]'
        name: Scope the code from ${{ matrix.pluginConfig.plugin_slug }} (via PHP-Scoper), and execute tests
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                pluginConfig: ${{ fromJson(needs.provide_data.outputs.plugin_config_entries) }}
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    submodules: ${{ env.CHECKOUT_SUBMODULES }}

                # see https://github.com/shivammathur/setup-php
            -   name: Set-up PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: 8.1
                    coverage: none
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: Install root dependencies
                uses: ramsey/composer-install@v3

            # "custom-bump-interdependency" temporarily needed because of bug:
            # https://github.com/symplify/symplify/issues/2773
            -   name: Localize package paths
                run: |
                    vendor/bin/monorepo-builder custom-bump-interdependency --config=config/monorepo-builder/custom-bump-interdependency.php "dev-${{ needs.provide_data.outputs.git_base_branch }}"
                    vendor/bin/monorepo-builder localize-composer-paths --config=config/monorepo-builder/localize-composer-paths.php ${{ matrix.pluginConfig.path }}/composer.json --ansi

            ###########################################################################
            # When building bundles (i.e. containing 2 or more extension plugins), if 2 extensions
            # contain the same entry under "replace" in composer.json, then "require"ing both of
            # them in the bundle fails.
            #
            # For instance, several plugins replace "pop-schema/schema-commons", producing
            # the following error message:
            #
            #   > Only one of these can be installed: pop-schema/schema-commons[dev-master], gatographql-pro/php-constants-and-environment-variables-via-schema[dev-master], gatographql-pro/helper-function-collection[dev-master]. [gatographql-pro/php-constants-and-environment-variables-via-schema, gatographql-pro/helper-function-collection] replace pop-schema/schema-commons and thus cannot coexist with it.
            #
            # As a solution, when generating the bundle plugin, remove all the "replace" entries
            # in the composer.json for the included plugins, and move them to the bundle composer.json
            ###########################################################################
            -   name: "Bundles: Transfer the 'replace' entries in composer.json, from the contained plugins to the bundle"
                run: |
                    vendor/bin/monorepo-builder transfer-composer-replace-entries-from-plugins-to-bundle --config=config/monorepo-builder/transfer-composer-replace-entries-from-plugins-to-bundle.php "${{ matrix.pluginConfig.path }}/composer.json" --exclude-replace="${{ matrix.pluginConfig.exclude_replace }}"
                if: ${{ matrix.pluginConfig.is_bundle }}

            ###########################################################################
            # When building standalone plugins, the "replace" entries from the bundled
            # extensions must be ignored, as these must also be contained within the
            # standalone plugin (which also contains Gato GraphQL).
            #
            # Because standalone plugins are bundles, in the previous step the
            # "replace" entries have been moved up from the bundled extensions
            # to the bundle's composer.json. Now, remove them.
            ###########################################################################
            -   name: "Standalone plugins: Remove the 'replace' entries in composer.json (originally from the contained plugins, now in the bundle)"
                run: |
                    vendor/bin/monorepo-builder remove-composer-replace-entries --config=config/monorepo-builder/remove-composer-replace-entries.php "${{ matrix.pluginConfig.path }}/composer.json"
                if: ${{ matrix.pluginConfig.is_standalone_plugin }}

            -   name: Install release dependencies for PROD
                run: composer install --no-dev --no-progress --no-interaction --ansi
                working-directory: ${{ matrix.pluginConfig.path }}

            -   name: Install PHP-Scoper (globally)
                run: |
                    composer global config minimum-stability dev
                    composer global config prefer-stable true
                    composer global require humbug/php-scoper

            # (Current situation) If the scoped results correspond to vendor/ only, we must do "--output-dir ../prefixed-plugin/vendor"
            # (Not happening now) If they also include src/, we must do "--output-dir ../prefixed-plugin"
            -   name: Scope code into separate folder
                run: php-scoper add-prefix --config=${{ matrix.pluginConfig.scoping.phpscoper_config.external }} --output-dir $GITHUB_WORKSPACE/build-prefixed/vendor --ansi
                working-directory: ${{ matrix.pluginConfig.path }}

            -   name: Copy scoped code back into original location
                run: rsync -av build-prefixed/ ${{ matrix.pluginConfig.path }} --quiet

            -   name: Regenerate autoloader for PROD
                run: composer dumpautoload --optimize --classmap-authoritative --ansi
                working-directory: ${{ matrix.pluginConfig.path }}

            -   name: Run Rector on the scoped code
                run: vendor/bin/rector process --config=${{ matrix.pluginConfig.scoping.rector_test_config }} --ansi

