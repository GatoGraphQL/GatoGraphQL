name: Static analysis via PHPStan
on:
    push:
        branches:
            - master
    pull_request: null

jobs:
    provide_data:
        name: Provide data
        runs-on: ubuntu-latest
        steps:
            -
                uses: actions/checkout@v2

            -   uses: shivammathur/setup-php@v2
                with:
                    php-version: 7.4
                    coverage: none
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   uses: "ramsey/composer-install@v1"

            -   id: output_data
                run: |
                    echo "::set-output name=packages::$(vendor/bin/monorepo-builder source-packages-entries-json)"

        outputs:
            packages: ${{ steps.output_data.outputs.packages }}

    main:
        needs: provide_data
        name: Execute PHP Code Sniffer
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout code
                uses: actions/checkout@v2

            -   name: Set-up PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: 7.4
                    coverage: none
                env:
                    COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            -   name: Install Composer dependencies
                uses: "ramsey/composer-install@v1"

            -   name: Run PHPStan
                run: |
                    # Helper functions
                    # ----------------------------------------------------------------------
                    function fail {
                        printf '%s\n' "$1" >&2  ## Send message to stderr. Exclude >&2 if you don't want it that way.
                        exit "${2-1}"  ## Return a code specified by $2 or 1 by default.
                    }
                    function join_by { local d=$1; shift; local f=$1; shift; printf %s "$f" "${@/#/$d}"; }
                    # ----------------------------------------------------------------------
                    
                    failed_packages=()
                    packages=(${{ join(fromJson(needs.provide_data.outputs.packages).*.path, ' ') }})
                    for package in "${packages[@]}"
                    do
                        vendor/bin/phpstan analyse $package/src $package/tests -c $package/phpstan.neon.dist
                        if [ "$?" -gt 0 ]; then
                            failed_packages+=($package)
                        fi
                    done
                    if [ ${#failed_packages[@]} -gt 0 ]; then
                        package_list=$(join_by ", " ${failed_packages[@]})
                        fail "PHPStan failed on packages: ${package_list}"
                    fi

