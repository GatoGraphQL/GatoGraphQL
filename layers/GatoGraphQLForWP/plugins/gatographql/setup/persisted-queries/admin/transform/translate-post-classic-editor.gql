########################################################################
#
# This Persisted GraphQL query translates a "Classic editor" post to
# the desired language.
#
# Depending on the `$update` parameter, the translation will either
# be saved as:
#
#   - false (default): A new post (using the translated slug) with "draft" status
#   - true: The same post
#
# *********************************************************************
# 
# URL params:
#   - postId: ID of the post to translate
#   - translateToLang: The language code to translate to, from Google Translate (https://cloud.google.com/translate/docs/languages)
#   - update: Indicate if to update the post, or create a new one
#
########################################################################

query FetchData($postId: ID!)
{
  post(by: { id: $postId } ) {
    id
    title
      @export(as: "title")
    rawContent
      @export(as: "rawContent")
  }
}

query TransformData(
  $translateToLang: String!
)
  @depends(on: "FetchData")
{  
  transformations: _echo(value: {
    meta: {
      from: ["", ""],
      to: [$title, $rawContent],
    }
  })
    @underEachJSONObjectProperty
      @underJSONObjectProperty(by: { key: "to" })
        @underEachArrayItem
          @strTranslate(to: $translateToLang)
    @export(as: "transformations")
}

query PrepareMetaReplacements
  @depends(on: "TransformData")
{  
  transformedMeta: _objectProperty(
    object: $transformations,
    by: { path: "meta.to" }
  )
    @underArrayItem(index: 0)
      @export(as: "transformedTitle")
    @underArrayItem(index: 1)
      @export(as: "transformedRawContent")
}

mutation TranslatePost(
  $postId: ID!
  $update: Boolean! = false
)
  @depends(on: "PrepareMetaReplacements")
{
  createPost(input: {
    title: $transformedTitle,
    contentAs: {
      html: $transformedRawContent
    },
    status: draft
  })
    @skip(if: $update)
  {
    status
    errors {
      __typename
      ...on ErrorPayload {
        message
      }
    }
    post {
      id
      title
      slug
      rawContent
    }    
  }

  updatePost(input: {
    id: $postId,
    title: $transformedTitle,
    contentAs: {
      html: $transformedRawContent
    }
  })
    @include(if: $update)
  {
    status
    errors {
      __typename
      ...on ErrorPayload {
        message
      }
    }
    post {
      id
      title
      rawContent
    }    
  }
}