########################################################################
# 
# Variables:
#   - username: The username to log into the external site
#   - appPassword: The application password to log into the external site
#   - categoryId: The category with the origin language, from where all translations will be made
#   - categoryTaxonomy: The taxonomy of the category. It is `category` by default (for categorys)
#   - updateSlug: Indicate if to update the category slug, using the translated name. It is `false` by default.
#   - includeSiteIDsToTranslate: Limit sites to execute the translation for. If empty, all sites are included
#   - excludeSiteIDsToTranslate: Exclude sites from executing the translation
#   - languageMapping: JSON object to convert languages codes to work with Google Translate. For instance, WordPress uses "nb" as the code for Norwegian, but Google Translate uses "no" instead; to translate to Norwegian, then pass value `{"nb": "no"}`
#   - (Optional) externalSiteGraphQLEndpointPath: Path to the GraphQL endpoint on the external site
#
# *********************************************************************
#
# === Description ===
#
# This Persisted GraphQL query is an integration for MultilingualPress,
# to translate categories, where every site in a
# WordPress multisite network is a translation site.
# 
# It must be executed on the master site, which must have the PRO plugin.
# All other sites in the network can have the free Gato GraphQL plugin.
#
# It takes an origin category on the master site, it translates it using the
# Google Translate API to all the other languages defined as connections
# in MultilingualPress, and stores those translations in the corresponding
# sites in the network. All translation categories in the network sites must
# already exist.
#
# To limit for what sites to execute the translation, pass
# variables `$includeSiteIDsToTranslate` (if empty, all sites
# will be included) and `$excludeSiteIDsToTranslate`.
#
# By default it doesn't translate the category slug. To enable, pass
# variable `updateSlug` with `true`.
#
# For some languages, the code used by WordPress and Google Translate
# are different. For instance, Norwegian is represented as "nb" by
# WordPress, and as "no" by Google Translate. To support translating
# to these languages, provide the language code mapping via the
# `$languageMapping` GraphQL variable, such as:
#
#   {
#     "languageMapping": {
#       "nb": "no"
#     }
#   }
#
########################################################################
query InitializeVariables
  @configureWarningsOnExportingDuplicateVariable(enabled: false)
{
  emptyBool: _echo(value: false)
    @export(as: "hasTranslationConnections")
    @export(as: "executeTranslation")
    @remove
  
  emptyArray: _echo(value: [])
    @export(as: "networkSiteTranslationConnectionDataItems")
    @remove
}

query ExportData(
  $username: String!
  $appPassword: String!
  $externalSiteGraphQLEndpointPath: String! = "/graphql/internal/"
)
  @depends(on: "InitializeVariables")
{
  # Retrieve the language of the content
  siteLanguage
    @export(as: "fromLanguage")

  # Sites in the network
  networkSites {
    name
    url
    siteID: id
    # Generate the external site's GraphQL endpoint to connect to
    endpoint: _sprintf(
      string: "%s%s",
      values: [
        $__url,
        $externalSiteGraphQLEndpointPath
      ]
    )
    language
      @export(
        as: "networkSiteDataItems"
        type: LIST
        affectAdditionalFieldsUnderPos: [1, 2]
      )
  }

  # Generate the authorization header to connect to the external site
  loginCredentials: _sprintf(
    string: "%s:%s",
    values: [$username, $appPassword]
  )
    @remove
  base64EncodedLoginCredentials: _strBase64Encode(
    string: $__loginCredentials
  )
    @remove
  authorizationHeaderValue: _sprintf(
    string: "Basic %s",
    values: [$__base64EncodedLoginCredentials]
  )
    @remove
    @export(as: "authorizationHeaderValue")
}

query ExportOriginCategory(
  $categoryId: ID!
  $categoryTaxonomy: CategoryTaxonomyEnumString! = "category"
  $includeSiteIDsToTranslate: [ID!]
  $excludeSiteIDsToTranslate: [ID!]
)
  @depends(on: "ExportData")
{
  originCategory: category(by: { id: $categoryId }, taxonomy: $categoryTaxonomy) {
    id
    

    multilingualpressTranslationConnections(filter: {
      includeSiteIDs: $includeSiteIDsToTranslate
      excludeSiteIDs: $excludeSiteIDsToTranslate
    }) {
      siteID
      categoryID: entityID
        @export(
          as: "translationConnectionDataItems",
          type: LIST,
          affectAdditionalFieldsUnderPos: 1
        )
    }

    hasTranslationConnections: _notEmpty(value: $__multilingualpressTranslationConnections)
      @export(as: "hasTranslationConnections")


    name
      @export(as: "originName")
    description
      @export(as: "originDescription")
  }
}

query CombineConnectionData
  @depends(on: "ExportOriginCategory")
  @include(if: $hasTranslationConnections)
{
  networkSiteTranslationConnectionDataItems: _arrayInnerJoinJSONObjectProperties(
    source: $networkSiteDataItems,
    target: $translationConnectionDataItems,
    index: "siteID"
  )
    @export(as: "networkSiteTranslationConnectionDataItems")

  executeTranslation: _notEmpty(value: $__networkSiteTranslationConnectionDataItems)
    @export(as: "executeTranslation")
}

query InitializeTranslationVariables
  @depends(on: "CombineConnectionData")
  @include(if: $executeTranslation)
{
  arrayItems: _arrayLength(array: $networkSiteTranslationConnectionDataItems)
    @remove

  name: _arrayPad(array: [], length: $__arrayItems, value: $originName)
    @export(as: "name")
    @remove
  description: _arrayPad(array: [], length: $__arrayItems, value: $originDescription)
    @export(as: "description")
    @remove
}

query AdaptData
  @depends(on: "InitializeTranslationVariables")
  @include(if: $executeTranslation)
{
  adaptedToName: _echo(value: $name)
    @underEachArrayItem(
      passValueOnwardsAs: "value"
    )
      @applyField(
        name: "_echo"
        arguments: {
          value: [$value]
        }
        setResultInResponse: true
      )
    @export(as: "adaptedToName")
  adaptedFromName: _echo(value: $name)
    @underEachArrayItem
      @applyField(
        name: "_echo"
        arguments: {
          value: [""]
        }
        setResultInResponse: true
      )
    @export(as: "adaptedFromName")

  adaptedToDescription: _echo(value: $description)
    @underEachArrayItem(
      passValueOnwardsAs: "value"
    )
      @applyField(
        name: "_echo"
        arguments: {
          value: [$value]
        }
        setResultInResponse: true
      )
    @export(as: "adaptedToDescription")
  adaptedFromDescription: _echo(value: $description)
    @underEachArrayItem
      @applyField(
        name: "_echo"
        arguments: {
          value: [""]
        }
        setResultInResponse: true
      )
    @export(as: "adaptedFromDescription")
}

query TransformData(
  $languageMapping: JSONObject! = {}
)
  @depends(on: "AdaptData")
  @include(if: $executeTranslation)
{
  transformations: _echo(value: {
    metaName: {
      from: $adaptedFromName,
      to: $adaptedToName,
    },
    metaDescription: {
      from: $adaptedFromDescription,
      to: $adaptedToDescription,
    }
  })
    @underEachJSONObjectProperty
      @underJSONObjectProperty(by: { key: "to" })
        @underEachArrayItem(
          passIndexOnwardsAs: "itemNumber"
          affectDirectivesUnderPos: [1, 2, 3, 4]
        )
          @applyField(
            name: "_arrayItem",
            arguments: {
              array: $networkSiteTranslationConnectionDataItems,
              position: $itemNumber
            },
            passOnwardsAs: "networkSiteTranslationConnectionDataItem"
          )
          @applyField(
            name: "_objectProperty",
            arguments: {
              object: $networkSiteTranslationConnectionDataItem,
              by: { key: "language" }
            },
            passOnwardsAs: "toLanguage"
          )
          @applyField(
            name: "_objectProperty",
            arguments: {
              object: $languageMapping,
              by: { key: $toLanguage }
              failIfNonExistingKeyOrPath: false
              valueWhenNonExistingKeyOrPath: $toLanguage
            },
            passOnwardsAs: "toLanguage"
          )
          @underEachArrayItem
            @strTranslate(
              from: $fromLanguage,
              to: $toLanguage
            )
    @export(as: "transformations")
}

query PrepareMetaReplacements
  @depends(on: "TransformData")
  @include(if: $executeTranslation)
{
  transformedMetaName: _echo(value: $name)
    @underEachArrayItem(
      passIndexOnwardsAs: "itemNumber"
      affectDirectivesUnderPos: [1, 2, 3]
    )
      @applyField(
        name: "_objectProperty",
        arguments: {
          object: $transformations
          by: { path: "metaName.to" }
        }
        passOnwardsAs: "transformedCategoryNameItem"
      )
      @applyField(
        name: "_arrayItem",
        arguments: {
          array: $transformedCategoryNameItem
          position: $itemNumber
        }
        passOnwardsAs: "transformedCategoryNameAsArray"
      )
      @applyField(
        name: "_arrayItem",
        arguments: {
          array: $transformedCategoryNameAsArray
          position: 0
        }
        setResultInResponse: true
      )
    @export(
      as: "transformedName"
    )

  transformedMetaDescription: _echo(value: $description)
    @underEachArrayItem(
      passIndexOnwardsAs: "itemNumber"
      affectDirectivesUnderPos: [1, 2, 3]
    )
      @applyField(
        name: "_objectProperty",
        arguments: {
          object: $transformations
          by: { path: "metaDescription.to" }
        }
        passOnwardsAs: "transformedCategoryExcerptItem"
      )
      @applyField(
        name: "_arrayItem",
        arguments: {
          array: $transformedCategoryExcerptItem
          position: $itemNumber
        }
        passOnwardsAs: "transformedCategoryExcerptAsArray"
      )
      @applyField(
        name: "_arrayItem",
        arguments: {
          array: $transformedCategoryExcerptAsArray
          position: 0
        }
        setResultInResponse: true
      )
    @export(
      as: "transformedDescription"
    )
}

query ExportMutationInputs(
  $updateSlug: Boolean! = false
  $categoryTaxonomy: CategoryTaxonomyEnumString! = "category"
)
  @depends(on: "PrepareMetaReplacements")
  @include(if: $executeTranslation)
{
  updateCategoryMutationInputDataItems: _echo(value: $networkSiteTranslationConnectionDataItems)
    @underEachArrayItem(
      passIndexOnwardsAs: "itemNumber"
      passValueOnwardsAs: "networkSiteTranslationConnectionDataItem"
      affectDirectivesUnderPos: [1, 2, 3, 4, 5, 6]
    )
      @applyField(
        name: "_objectProperty",
        arguments: {
          object: $networkSiteTranslationConnectionDataItem,
          by: { key: "endpoint" }
        },
        passOnwardsAs: "itemEndpoint"
      )
      @applyField(
        name: "_objectProperty",
        arguments: {
          object: $networkSiteTranslationConnectionDataItem,
          by: { key: "categoryID" }
        },
        passOnwardsAs: "itemCategoryID"
      )
      @applyField(
        name: "_arrayItem",
        arguments: {
          array: $transformedName,
          position: $itemNumber
        },
        passOnwardsAs: "itemTransformedName"
      )
      @applyField(
        name: "_arrayItem",
        arguments: {
          array: $transformedDescription,
          position: $itemNumber
        },
        passOnwardsAs: "itemTransformedDescription"
      )
      @applyField(
        name: "_echo"
        arguments: {
          value: {
            endpoint: $itemEndpoint,
            input: {
              id: $itemCategoryID,
              taxonomy: $categoryTaxonomy,
              name: $itemTransformedName,
              description: $itemTransformedDescription
            }
          }
        }
        passOnwardsAs: "itemInput"
        setResultInResponse: true
      )
      @if(condition: $updateSlug)
        @applyField(
          name: "_objectAddEntry",
          arguments: {
            object: $itemInput
            key: "slug"
            value: $itemTransformedName
          },
          setResultInResponse: true
        )
    @export(
      as: "updateCategoryMutationInputDataItems"
    )
}

mutation UpdatePagesWithTranslationOnExternalSite
  @depends(on: "ExportMutationInputs")
  @include(if: $executeTranslation)
{
  updateExternalSitePageHTTPRequests: _echo(value: $updateCategoryMutationInputDataItems)
    @underEachArrayItem(
      passValueOnwardsAs: "mutationInputDataItem"
      affectDirectivesUnderPos: [1, 2, 3]
    )
      @applyField(
        name: "_objectProperty",
        arguments: {
          object: $mutationInputDataItem,
          by: { key: "endpoint" }
        },
        passOnwardsAs: "endpoint"
      )
      @applyField(
        name: "_objectProperty",
        arguments: {
          object: $mutationInputDataItem,
          by: { key: "input" }
        },
        passOnwardsAs: "input"
      )
      @applyField(
        name: "_sendGraphQLHTTPRequest"
        arguments: {
          input: {
            endpoint: $endpoint,
            query: """
          
mutation UpdateCategoryFromMasterSite($input: JSONObject!) {
  updateCategory(input: $input) {
    status
    errors {
      __typename
      ...on ErrorPayload {
        message
      }
    }
    category {
      id
      slug
      name
      description
    }
  }
}

            """,
            variables: [
              {
                name: "input",
                value: $input
              }
            ],
            options: {
              headers: [
                {
                  name: "Authorization",
                  value: $authorizationHeaderValue
                }
              ]
            }
          }
        },
        setResultInResponse: true
      )
}
