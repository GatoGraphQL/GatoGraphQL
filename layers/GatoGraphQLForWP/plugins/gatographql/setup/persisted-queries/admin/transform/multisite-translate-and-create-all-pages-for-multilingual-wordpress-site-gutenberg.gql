########################################################################
# 
# Variables:
#   - $username: The username to log into the external site
#   - $appPassword: The application password to log into the external site
#   - $externalSiteURL: The URL of the external site, where all pages will be (translated and) created
#   - (Optional) $externalSiteGraphQLEndpointPath: Path to the GraphQL endpoint on the external site, with the "nested mutations" feature enabled
#
# *********************************************************************
#
# === Description ===
#
# This Persisted GraphQL query works on a WordPress Multisite network,
# to create a Multilingual site, where every site in the network
# is the translation for some language. The content is based on the
# Gutenberg editor.
# 
# It must be executed on the master site, which must have the PRO plugin.
# All other sites in the network can have the free Gato GraphQL plugin.
#
# The query first connects to the external site, and retrieves its language.
# Then it grabs all the pages from the master site, and it translates them
# all at once (in bulk) to that language, by executing a single call to the
# Google Translate API.
#
# Finally it logs into the external site again, and creates all those pages
# with all the translations.
#
########################################################################

query InitializeVariables
  @configureWarningsOnExportingDuplicateVariable(enabled: false)
{
  emptyBool: _echo(value: false)
    @export(as: "hasRetrievedExternalSiteLanguage")
    @remove
}

query ExportData(
  $username: String!
  $appPassword: String!
  $externalSiteURL: URL!
  $externalSiteGraphQLEndpointPath: String! = "/graphql/nested-mutations/"
)
  @depends(on: "InitializeVariables")
{
  # Retrieve the language of the content
  siteLanguage
    @export(as: "fromLanguage")

  # Generate the authorization header to connect to the external site
  loginCredentials: _sprintf(
    string: "%s:%s",
    values: [$username, $appPassword]
  )
    @remove
  base64EncodedLoginCredentials: _strBase64Encode(
    string: $__loginCredentials
  )
    @remove
  authorizationHeaderValue: _sprintf(
    string: "Basic %s",
    values: [$__base64EncodedLoginCredentials]
  )
    @remove
    @export(as: "authorizationHeaderValue")
  
  # Generate the external site's GraphQL endpoint to connect to
  endpoint: _sprintf(
    string: "%s%s",
    values: [
      $externalSiteURL,
      $externalSiteGraphQLEndpointPath
    ]
  )
    @export(as: "endpoint")
}

query GetExternalSiteLanguage
  @depends(on: "ExportData")
{
  # Retrieve the language of the external site
  externalHTTPRequest: _sendGraphQLHTTPRequest(input:{
    endpoint: $endpoint,
    query: """
  
{
  me {
    name
  }
  siteLanguage
}

    """,
    options: {
      headers: [
        {
          name: "Authorization",
          value: $authorizationHeaderValue
        }
      ]
    }
  })
  externalSiteLanguage: _objectProperty(
    object: $__externalHTTPRequest,
    by: {
      path: "data.siteLanguage"
    }
  )
    @export(as: "toLanguage")
  
  # Flag to indicate if connecting to the external site was successful
  hasRetrievedExternalSiteLanguage: _notEmpty(
    value: $__externalSiteLanguage
  )
    @export(as: "hasRetrievedExternalSiteLanguage")
}

