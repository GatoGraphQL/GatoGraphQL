########################################################################
# 
# Variables:
#   - customPostId: The custom post with the origin language, from where to trigger the featured image updates
#   - statusToUpdate: The status that the translation posts must have to be updated. It is `any` by default
#   - triggerUpdateFromDefaultLanguageOnly: Indicate if to only execute the featured image update when the origin post has the default language of the site. It is `true` by default.
#
# *********************************************************************
#
# === Description ===
#
# This Persisted GraphQL query is an integration for Polylang.
#
# It takes an origin post, queries its featured image,
# and updates its translation posts with the corresponding
# featured image for the corresponding language,
# as set-up via Polylang. If there is no translation for that
# image, the same image from the origin post is set.
#
# If the origin post does not have a featured image,
# it removes it from all translation posts.
#
# By default, the origin post must have the default language
# of the site, or the update will not be executed.
# To trigger the update from any language, pass variable
# `$triggerUpdateFromDefaultLanguageOnly` with `false`.
#
########################################################################
query InitializeVariables
  @configureWarningsOnExportingDuplicateVariable(enabled: false)
{
  emptyString: _echo(value: null)
    @export(as: "fromLanguage")
    @remove

  emptyID: _echo(value: null)
    @export(as: "originCustomPostFeaturedImageID")
    @remove

  emptyBool: _echo(value: false)
    @export(as: "hasFeaturedImage")
    @export(as: "executeUpdate")
    @export(as: "hasOriginCustomPostTranslationPosts")
    @remove
  
  emptyArray: _echo(value: [])
    @export(as: "originCustomPostTranslationPostIds")
    @remove
  
  emptyJSON: _echo(value: {})
    @export(as: "featuredImageTranslationLanguageIDs")
    @remove
}

query ExportDataFromOriginCustomPost($customPostId: ID!)
  @depends(on: "InitializeVariables")
{
  defaultLanguage: polylangDefaultLanguage {
    code @export(as: "defaultLanguage")
  }

  languages: polylangLanguages {
    code @export(
      as: "languageLocaleCodes"
      type: DICTIONARY
    )
  }

  originCustomPost: customPost(by: { id: $customPostId }, status: any) {
    __typename
    ...on CustomPost {
      id

      polylangLanguage {
        code @export(as: "fromLanguage")
      }
      
      polylangTranslationLanguageIDs
        @remove
      customPostIDTranslationLanguageIDs: _echo(value: $__polylangTranslationLanguageIDs)
        @export(as: "customPostIDTranslationLanguageIDs")

      hasTranslationCustomPosts: _notEmpty(value: $__customPostIDTranslationLanguageIDs)
        @export(as: "hasOriginCustomPostTranslationPosts")

      featuredImage @export(as: "originCustomPostFeaturedImageID") {
        id

        polylangTranslationLanguageIDs
          @export(as: "featuredImageTranslationLanguageIDs")
      }

      hasFeaturedImage: _notNull(value: $__featuredImage)
        @export(as: "hasFeaturedImage")
    }
  }
}

query FilterTranslationCustomPostsToUpdate(
  $statusToUpdate: CustomPostStatusEnum! = any
  $triggerUpdateFromDefaultLanguageOnly: Boolean! = true
)
  @depends(on: "ExportDataFromOriginCustomPost")
  @include(if: $hasOriginCustomPostTranslationPosts)
{
  originCustomPostTranslationPostIds: _objectValues(object: $customPostIDTranslationLanguageIDs)
    @export(as: "originCustomPostTranslationPostIds")
  translationCustomPosts: customPosts(filter: { ids: $__originCustomPostTranslationPostIds, status: $statusToUpdate } ) {
    __typename
    ...on CustomPost {
      id
    }
  }

  hasTranslationCustomPosts: _notEmpty(value: $__translationCustomPosts)

  originCustomPostHasDefaultLanguage: _equals(
    value1: $defaultLanguage,
    value2: $fromLanguage
  )

  canTriggerUpdateFromOriginPost: _if(
    condition: $triggerUpdateFromDefaultLanguageOnly,
    then: $__originCustomPostHasDefaultLanguage,
    else: true
  )

  executeUpdate: _and(values: [
    $__hasTranslationCustomPosts,
    $__canTriggerUpdateFromOriginPost
  ])
    @export(as: "executeUpdate")
}

mutation UpdateOrRemoveFeaturedImageForTranslationCustomPosts(
  $statusToUpdate: CustomPostStatusEnum! = any
)
  @depends(on: "FilterTranslationCustomPostsToUpdate")
  @include(if: $executeUpdate)
{
  updateFeaturedImageInTranslationCustomPosts: customPosts(filter: { ids: $originCustomPostTranslationPostIds, status: $statusToUpdate } )
    @include(if: $hasFeaturedImage)
  {
    __typename
    ...on CustomPost {
      id

      polylangLanguageLocale: polylangLanguage {
        code
      }
      polylangLanguage: _objectProperty(
        object: $languageLocaleCodes,
        by: { key: $__polylangLanguageLocale }
      )

      translationFeaturedImageID: _objectProperty(
        object: $featuredImageTranslationLanguageIDs,
        by: {
          key: $__polylangLanguage
        }
        failIfNonExistingKeyOrPath: false
      )

      hasTranslationFeaturedImageID: _notNull(value: $__translationFeaturedImageID)

      translationOrDefaultFeaturedImageID: _if(
        condition: $__hasTranslationFeaturedImageID,
        then: $__translationFeaturedImageID,
        else: $originCustomPostFeaturedImageID
      )
        
      setFeaturedImage(input: {
        mediaItemBy: {
          id: $__translationOrDefaultFeaturedImageID
        }
      }) {
        status
        errors {
          __typename
          ...on ErrorPayload {
            message
          }
        }
        customPost {
          __typename
          ...on CustomPost {
            featuredImage {
              id
              polylangLanguage {
                code
              }
            }
          }
        }
      }
    }
  }

  removeFeaturedImageFromTranslationCustomPosts: customPosts(filter: { ids: $originCustomPostTranslationPostIds, status: $statusToUpdate } )
    @skip(if: $hasFeaturedImage)
  {
    __typename
    ...on CustomPost {
      id      
      removeFeaturedImage {
        status
        errors {
          __typename
          ...on ErrorPayload {
            message
          }
        }
        customPost {
          __typename
          ...on CustomPost {
            featuredImage {
              id
            }
          }
        }
      }
    }
  }
}