########################################################################
# 
# Variables:
#   - mediaItemId: The media item with the origin language, from where all translations will be made
#   - translateDefaultLanguageOnly: Indicate if only execute the translation when the origin media item has the default language of the site. It is `true` by default.
#   - translateFromLanguage: Only execute the translation when the origin media item has some provided language. It applies only when `translateDefaultLanguageOnly` is `false`
#   - includeLanguagesToTranslate: Limit languages to execute the translation for. If empty, all languages are included
#   - excludeLanguagesToTranslate: Exclude languages from executing the translation
#
# *********************************************************************
#
# === Description ===
#
# This Persisted GraphQL query is an integration for Polylang,
# to create the missing translation media items.
#
# It takes an origin media item, and duplicates it into all the other
# languages defined in Polylang for which there is no media item yet.
#
# By default, the origin media item must have the default language
# of the site, or the logic will not be executed.
# To execute for any language, pass variable
# `$translateDefaultLanguageOnly` with `false`.
#
# Additionally, execute the logic only when the origin media item
# has a specific language by providing `$translateFromLanguage`
# with the language code (for instance, `"en"`). It applies only
# when `$translateDefaultLanguageOnly` is `false`.
#
# To limit for what languages to execute the logic, pass
# variables `$includeLanguagesToTranslate` (if empty, all languages
# will be included) and `$excludeLanguagesToTranslate`.
#
########################################################################
query InitializeVariables
  @configureWarningsOnExportingDuplicateVariable(enabled: false)
{
  emptyBool: _echo(value: false)
    @export(as: "canTranslateOriginMediaItem")
    @export(as: "hasMissingTranslationLanguages")
    @export(as: "hasCreatedTranslationMediaItems")
    @export(as: "hasOriginMediaItemParentCustomPost")
    @remove

  emptyArray: _echo(value: [])
    @export(as: "createdTranslationMediaItemIDs")
    @remove

  emptyObject: _echo(value: {})
    @export(as: "mediaItemParentCustomPostTranslationLanguages")
    @remove
}

query ExportOriginMediaItem(
  $mediaItemId: ID!
  $includeLanguagesToTranslate: [String!]
  $excludeLanguagesToTranslate: [String!]
)
  @depends(on: "InitializeVariables")
{
  defaultLanguage: polylangDefaultLanguage {
    code @export(as: "defaultLanguage")
  }

  enabledLanguages: polylangLanguages(filter: { enabled: true }) {
    code @export(as: "enabledLanguages", type: LIST)
  }

  originMediaItem: mediaItem(by: { id: $mediaItemId }) {
    id

    
    ################################################################
    # Data needed to duplicate media item for missing languages
    ################################################################
    originMediaItemTitle: title @export(as: "originMediaItemTitle")
    originMediaItemDescription: description @export(as: "originMediaItemDescription")
    originMediaItemCaption: caption @export(as: "originMediaItemCaption")
    originMediaItemAltText: altText @export(as: "originMediaItemAltText")
    originMediaItemAuthorID: author @export(as: "originMediaItemAuthorID") {
      id
    }
    originMediaItemParentCustomPost: parentCustomPost @export(as: "originMediaItemParentCustomPostID") {
      id
    }
    ################################################################
    hasOriginMediaItemParentCustomPost: _notNull(value: $__originMediaItemParentCustomPost)
      @export(as: "hasOriginMediaItemParentCustomPost")


    polylangLanguage {
      code @export(as: "fromLanguage")
    }
    

    polylangTranslationLanguageIDs(filter: {
      includeSelf: true
      includeLanguages: $includeLanguagesToTranslate
      excludeLanguages: $excludeLanguagesToTranslate
    })
      @remove
    mediaItemIDTranslationLanguageIDs: _echo(value: $__polylangTranslationLanguageIDs)
      @default(value: {})
      @export(as: "mediaItemIDTranslationLanguageIDs")
  }

  hasOriginMediaItem: _notNull(value: $__originMediaItem)
    @export(as: "hasOriginMediaItem")
}

query ExportOriginMediaItemCanBeTranslated(
  $translateDefaultLanguageOnly: Boolean! = true
  $translateFromLanguage: String
)
  @depends(on: "ExportOriginMediaItem")
  @include(if: $hasOriginMediaItem)
{
  originMediaItemHasDefaultLanguage: _equals(
    value1: $defaultLanguage,
    value2: $fromLanguage
  )

  isTranslateFromLanguageProvided: _notEmpty(value: $translateFromLanguage)

  originMediaItemHasSpecificLanguage: _equals(
    value1: $translateFromLanguage,
    value2: $fromLanguage
  )

  canTranslateOriginMediaItemFromSpecificLanguage: _if(
    condition: $__isTranslateFromLanguageProvided,
    then: $__originMediaItemHasSpecificLanguage,
    else: true
  )

  canTranslateOriginMediaItem: _if(
    condition: $translateDefaultLanguageOnly,
    then: $__originMediaItemHasDefaultLanguage,
    else: $__canTranslateOriginMediaItemFromSpecificLanguage
  )
    @export(as: "canTranslateOriginMediaItem")
}

query ExportOriginMediaItemParent
  @depends(on: "ExportOriginMediaItemCanBeTranslated")
  @include(if: $canTranslateOriginMediaItem)
  @include(if: $hasOriginMediaItemParentCustomPost)
{
  originMediaItemParentCustomPost: customPost(by: { id: $originMediaItemParentCustomPostID }) {
    __typename
    ...on CustomPost {
      id

      
      polylangTranslationLanguageIDs
        @export(as: "mediaItemParentCustomPostTranslationLanguages")
    }
  }
}

query ExportMissingTranslationLanguages(
  $includeLanguagesToTranslate: [String!]! = []
  $excludeLanguagesToTranslate: [String!]! = []
)
  @depends(on: "ExportOriginMediaItemParent")
  @include(if: $canTranslateOriginMediaItem)
{
  currentlyExistingTranslationLanguages: _objectProperties(object: $mediaItemIDTranslationLanguageIDs)
  missingTranslationLanguagesWithoutFilteringByInclude: _arrayDiff(
    arrays: [
      $enabledLanguages,
      $__currentlyExistingTranslationLanguages,
      $excludeLanguagesToTranslate
    ]
  )
  hasIncludeLanguagesToTranslate: _notEmpty(value: $includeLanguagesToTranslate)
  missingTranslationLanguagesWithFilteringByInclude: _arrayIntersect(
    arrays: [
      $__missingTranslationLanguagesWithoutFilteringByInclude,
      $includeLanguagesToTranslate
    ]
  )
  missingTranslationLanguages: _if(
    condition: $__hasIncludeLanguagesToTranslate,
    then: $__missingTranslationLanguagesWithFilteringByInclude,
    else: $__missingTranslationLanguagesWithoutFilteringByInclude
  )
    @export(as: "missingTranslationLanguages")
  hasMissingTranslationLanguages: _notEmpty(value: $__missingTranslationLanguages)
    @export(as: "hasMissingTranslationLanguages")
}

query CreateTranslationMediaItemInputsForMissingLanguages(
  $mediaItemId: ID!
)
  @depends(on: "ExportMissingTranslationLanguages")
  @include(if: $hasMissingTranslationLanguages)
{
  createTranslationMediaItemInputs: _echo(value: $missingTranslationLanguages)
    @underEachArrayItem(
      passValueOnwardsAs: "languageCode"
      affectDirectivesUnderPos: [1, 2, 3]
    )
      @applyField(
        name: "_sprintf"
        arguments: {
          string: "%s (%s)"
          values: [$originMediaItemTitle, $languageCode]
        }
        passOnwardsAs: "originMediaItemTitleForLanguage"
      )
      @applyField(
        name: "_objectProperty",
        arguments: {
          object: $mediaItemParentCustomPostTranslationLanguages,
          by: { key: $languageCode }
          failIfNonExistingKeyOrPath: false
          valueWhenNonExistingKeyOrPath: $originMediaItemParentCustomPostID
        },
        passOnwardsAs: "originSameOrTranslatedMediaItemParentCustomPostID"
      )
      @applyField(
        name: "_echo",
        arguments: {
          value: {
            from: {
              mediaItemBy: {
                id: $mediaItemId
              }
            }
            title: $originMediaItemTitleForLanguage
            description: $originMediaItemDescription
            caption: $originMediaItemCaption
            altText: $originMediaItemAltText
            authorID: $originMediaItemAuthorID
            customPostID: $originSameOrTranslatedMediaItemParentCustomPostID
            polylangLanguageBy: { code: $languageCode }
          }
        },
        setResultInResponse: true
      )
    @export(as: "createTranslationMediaItemInputs")
}

mutation CreateTranslationMediaItemForMissingLanguages
  @depends(on: "CreateTranslationMediaItemInputsForMissingLanguages")
  @include(if: $hasMissingTranslationLanguages)
{
  translationMediaItems: createMediaItems(inputs: $createTranslationMediaItemInputs) {
    status
    errors {
      __typename
      ...on ErrorPayload {
        message
      }
    }
    mediaItem {
      id
        @export(as: "createdTranslationMediaItemIDs", type: LIST)
      hasCreatedTranslationMediaItems: _echo(value: true)
        @export(as: "hasCreatedTranslationMediaItems")
        @remove
      title
      slug
      src
      parentCustomPost {
        id
        title
      }
      polylangLanguage {
        code
      }
    }    
  }
}

query ExportAllTranslationMediaItems
  @depends(on: "CreateTranslationMediaItemForMissingLanguages")
  @include(if: $hasCreatedTranslationMediaItems)
{
  currentlyExistingTranslationMediaItemIDs: _objectValues(object: $mediaItemIDTranslationLanguageIDs)
  allTranslationMediaItemIDs: _arrayMerge(
    arrays: [
      $__currentlyExistingTranslationMediaItemIDs,
      $createdTranslationMediaItemIDs,
    ]
  )
    @export(as: "allTranslationMediaItemIDs")
}

mutation CreateMissingTranslationMediaItemsForPolylang
  @depends(on: "ExportAllTranslationMediaItems")
  @include(if: $hasCreatedTranslationMediaItems)
{
  polylangSaveMediaItemTranslationAssociation(input: {
    ids: $allTranslationMediaItemIDs
  }) {
    status
    errors {
      __typename
      ...on ErrorPayload {
        message
      }
    }
  }
}