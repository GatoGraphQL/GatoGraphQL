########################################################################
# 
# Variables:
#   - categoryId: The category with the origin language, from where all translations will be made
#   - categoryTaxonomy: The taxonomy of the category. It is `category` by default (for categorys)
#   - translateDefaultLanguageOnly: Indicate if only execute the translation when the origin category has the default language of the site. It is `true` by default.
#   - translateFromLanguage: Only execute the translation when the origin category has some provided language. It applies only when `translateDefaultLanguageOnly` is `false`
#   - includeLanguagesToTranslate: Limit languages to execute the translation for. If empty, all languages are included
#   - excludeLanguagesToTranslate: Exclude languages from executing the translation
#
# *********************************************************************
#
# === Description ===
#
# This Persisted GraphQL query is an integration for Polylang,
# to create the missing translation categories.
#
# It takes an origin category, and duplicates it into all the other
# languages defined in Polylang for which there is no category yet.
#
# By default, the origin category must have the default language
# of the site, or the logic will not be executed.
# To execute for any language, pass variable
# `$translateDefaultLanguageOnly` with `false`.
#
# Additionally, execute the logic only when the origin category
# has a specific language by providing `$translateFromLanguage`
# with the language code (for instance, `"en"`). It applies only
# when `$translateDefaultLanguageOnly` is `false`.
#
# To limit for what languages to execute the logic, pass
# variables `$includeLanguagesToTranslate` (if empty, all languages
# will be included) and `$excludeLanguagesToTranslate`.
#
########################################################################
query InitializeVariables
  @configureWarningsOnExportingDuplicateVariable(enabled: false)
{
  emptyBool: _echo(value: false)
    @export(as: "canTranslateOriginCategory")
    @export(as: "hasMissingTranslationLanguages")
    @export(as: "hasCreatedTranslationCategories")
    @export(as: "hasOriginCategoryParent")
    @remove

  emptyArray: _echo(value: [])
    @export(as: "createdTranslationCategoryIDs")
    @remove

  emptyObject: _echo(value: {})
    @export(as: "categoryParentTranslationLanguages")
    @remove
}

query ExportOriginCategory(
  $categoryId: ID!
  $categoryTaxonomy: CategoryTaxonomyEnumString! = "category"
  $includeLanguagesToTranslate: [String!]
  $excludeLanguagesToTranslate: [String!]
)
  @depends(on: "InitializeVariables")
{
  defaultLanguage: polylangDefaultLanguage {
    code @export(as: "defaultLanguage")
  }

  enabledLanguages: polylangLanguages(filter: { enabled: true }) {
    code @export(as: "enabledLanguages", type: LIST)
  }

  originCategory: category(by: { id: $categoryId }, taxonomy: $categoryTaxonomy) {
    id

    
    ################################################################
    # Data needed to duplicate category for missing languages
    ################################################################
    originCategoryName: name @export(as: "originCategoryName")
    originCategoryDescription: description @export(as: "originCategoryDescription")
    originCategoryParent: parent @export(as: "originCategoryParentID") {
      id
    }
    ################################################################
    hasOriginCategoryParent: _notNull(value: $__originCategoryParent)
      @export(as: "hasOriginCategoryParent")


    polylangLanguage {
      code @export(as: "fromLanguage")
    }
    

    polylangTranslationLanguageIDs(filter: {
      includeSelf: true
      includeLanguages: $includeLanguagesToTranslate
      excludeLanguages: $excludeLanguagesToTranslate
    })
      @remove
    categoryIDTranslationLanguageIDs: _echo(value: $__polylangTranslationLanguageIDs)
      @default(value: {})
      @export(as: "categoryIDTranslationLanguageIDs")
  }

  hasOriginCategory: _notNull(value: $__originCategory)
    @export(as: "hasOriginCategory")
}

query ExportOriginCategoryCanBeTranslated(
  $translateDefaultLanguageOnly: Boolean! = true
  $translateFromLanguage: String
)
  @depends(on: "ExportOriginCategory")
  @include(if: $hasOriginCategory)
{
  originCategoryHasDefaultLanguage: _equals(
    value1: $defaultLanguage,
    value2: $fromLanguage
  )

  isTranslateFromLanguageProvided: _notEmpty(value: $translateFromLanguage)

  originCategoryHasSpecificLanguage: _equals(
    value1: $translateFromLanguage,
    value2: $fromLanguage
  )

  canTranslateOriginCategoryFromSpecificLanguage: _if(
    condition: $__isTranslateFromLanguageProvided,
    then: $__originCategoryHasSpecificLanguage,
    else: true
  )

  canTranslateOriginCategory: _if(
    condition: $translateDefaultLanguageOnly,
    then: $__originCategoryHasDefaultLanguage,
    else: $__canTranslateOriginCategoryFromSpecificLanguage
  )
    @export(as: "canTranslateOriginCategory")
}

query ExportOriginCategoryParent(
  $categoryTaxonomy: CategoryTaxonomyEnumString! = "category"
)
  @depends(on: "ExportOriginCategoryCanBeTranslated")
  @include(if: $canTranslateOriginCategory)
  @include(if: $hasOriginCategoryParent)
{
  originCategoryParent: category(by: { id: $originCategoryParentID }, taxonomy: $categoryTaxonomy) {
    id

    
    polylangTranslationLanguageIDs
      @export(as: "categoryParentTranslationLanguages")
  }
}

query ExportMissingTranslationLanguages(
  $includeLanguagesToTranslate: [String!]! = []
  $excludeLanguagesToTranslate: [String!]! = []
)
  @depends(on: "ExportOriginCategoryParent")
  @include(if: $canTranslateOriginCategory)
{
  currentlyExistingTranslationLanguages: _objectProperties(object: $categoryIDTranslationLanguageIDs)
  missingTranslationLanguagesWithoutFilteringByInclude: _arrayDiff(
    arrays: [
      $enabledLanguages,
      $__currentlyExistingTranslationLanguages,
      $excludeLanguagesToTranslate
    ]
  )
  hasIncludeLanguagesToTranslate: _notEmpty(value: $includeLanguagesToTranslate)
  missingTranslationLanguagesWithFilteringByInclude: _arrayIntersect(
    arrays: [
      $__missingTranslationLanguagesWithoutFilteringByInclude,
      $includeLanguagesToTranslate
    ]
  )
  missingTranslationLanguages: _if(
    condition: $__hasIncludeLanguagesToTranslate,
    then: $__missingTranslationLanguagesWithFilteringByInclude,
    else: $__missingTranslationLanguagesWithoutFilteringByInclude
  )
    @export(as: "missingTranslationLanguages")
  hasMissingTranslationLanguages: _notEmpty(value: $__missingTranslationLanguages)
    @export(as: "hasMissingTranslationLanguages")
}

query CreateTranslationCategoryInputsForMissingLanguages(
  $categoryTaxonomy: CategoryTaxonomyEnumString! = "category"
)
  @depends(on: "ExportMissingTranslationLanguages")
  @include(if: $hasMissingTranslationLanguages)
{
  createTranslationCategoryInputs: _echo(value: $missingTranslationLanguages)
    @underEachArrayItem(
      passValueOnwardsAs: "languageCode"
      affectDirectivesUnderPos: [1, 2, 3]
    )
      @applyField(
        name: "_sprintf"
        arguments: {
          string: "%s (%s)"
          values: [$originCategoryName, $languageCode]
        }
        passOnwardsAs: "originCategoryNameForLanguage"
      )
      @applyField(
        name: "_objectProperty",
        arguments: {
          object: $categoryParentTranslationLanguages,
          by: { key: $languageCode }
          failIfNonExistingKeyOrPath: false
          valueWhenNonExistingKeyOrPath: $originCategoryParentID
        },
        passOnwardsAs: "originSameOrTranslatedCategoryParentID"
      )
      @applyField(
        name: "_echo",
        arguments: {
          value: {
            taxonomy: $categoryTaxonomy
            name: $originCategoryNameForLanguage
            description: $originCategoryDescription
            parentBy: {
              id: $originSameOrTranslatedCategoryParentID
            },
            polylangLanguageBy: { code: $languageCode }
          }
        },
        setResultInResponse: true
      )
    @export(as: "createTranslationCategoryInputs")
}

mutation CreateTranslationCategoryForMissingLanguages
  @depends(on: "CreateTranslationCategoryInputsForMissingLanguages")
  @include(if: $hasMissingTranslationLanguages)
{
  translationCategories: createCategories(inputs: $createTranslationCategoryInputs) {
    status
    errors {
      __typename
      ...on ErrorPayload {
        message
      }
    }
    category {
      id
        @export(as: "createdTranslationCategoryIDs", type: LIST)
      hasCreatedTranslationCategories: _echo(value: true)
        @export(as: "hasCreatedTranslationCategories")
        @remove
      name
      slug
      polylangLanguage {
        code
      }
    }    
  }
}

query ExportAllTranslationCategories
  @depends(on: "CreateTranslationCategoryForMissingLanguages")
  @include(if: $hasCreatedTranslationCategories)
{
  currentlyExistingTranslationCategoryIDs: _objectValues(object: $categoryIDTranslationLanguageIDs)
  allTranslationCategoryIDs: _arrayMerge(
    arrays: [
      $__currentlyExistingTranslationCategoryIDs,
      $createdTranslationCategoryIDs,
    ]
  )
    @export(as: "allTranslationCategoryIDs")
}

mutation CreateMissingTranslationCategoriesForPolylang
  @depends(on: "ExportAllTranslationCategories")
  @include(if: $hasCreatedTranslationCategories)
{
  polylangSaveTaxonomyTermTranslationAssociation(input: {
    ids: $allTranslationCategoryIDs
  }) {
    status
    errors {
      __typename
      ...on ErrorPayload {
        message
      }
    }
  }
}