########################################################################
#
# This Persisted GraphQL query translates multiple "Classic editor"
# posts at once (in bulk), while executing a single call to the Google
# Translate API containing all text to translate from all the posts.
#
# The translation for each post will be saved under the same post.
#
# See Persisted Query "Translate post (Classic editor)" for additional
# documentation.
#
# *********************************************************************
# 
# URL params:
#   - postIds: List of IDs of the posts to translate
#   - translateToLang: The language code to translate to, from Google Translate (https://cloud.google.com/translate/docs/languages)
#
########################################################################

query FetchData($postIds: [ID!]!)
{
  posts(filter: { ids: $postIds } ) {
    id
    title
      @export(as: "title", type: DICTIONARY)
    # rawContent
    #   @export(as: "rawContent", type: DICTIONARY)
  }
}

query AdaptData
  @depends(on: "FetchData")
{
  adaptedToTitle: _echo(value: $title)
    @underEachJSONObjectProperty(
      passValueOnwardsAs: "value"
    )
      @applyField(
        name: "_echo"
        arguments: {
          value: [$value]
        }
        setResultInResponse: true
      )
    @export(as: "adaptedToTitle")
  adaptedFromTitle: _echo(value: $title)
    @underEachJSONObjectProperty
      @applyField(
        name: "_echo"
        arguments: {
          value: [""]
        }
        setResultInResponse: true
      )
    @export(as: "adaptedFromTitle")
}

query TransformData(
  $translateToLang: String!
)
  @depends(on: "AdaptData")
{
  transformations: _echo(value: {
    meta: {
      from: $adaptedFromTitle,
      to: $adaptedToTitle,
    }
  })
    @underEachJSONObjectProperty
      @underJSONObjectProperty(by: { key: "to" })
        @underEachJSONObjectProperty
          @underEachArrayItem
            @strTranslate(to: $translateToLang)
    @export(as: "transformations")
}

query PrepareMetaReplacements
  @depends(on: "TransformData")
{  
  transformedMeta: _echo(value: $title)
    @underEachJSONObjectProperty(
      passKeyOnwardsAs: "postID"
      affectDirectivesUnderPos: [1, 2, 3]
    )
      @applyField(
        name: "_sprintf",
        arguments: {
          string: "meta.to.%s",
          values: [$postID]
        }
        passOnwardsAs: "titlePath"
      )
      @applyField(
        name: "_objectProperty",
        arguments: {
          object: $transformations
          by: { path: $titlePath }
        }
        passOnwardsAs: "transformedPostTitleAsArray"
      )
      @applyField(
        name: "_arrayItem",
        arguments: {
          array: $transformedPostTitleAsArray
          position: 0
        }
        setResultInResponse: true
      )
    @export(
      as: "transformedTitle"
    )
}

mutation TranslatePosts($postIds: [ID!]!)
  @depends(on: "PrepareMetaReplacements")
{
  updatePosts: posts(filter: { ids: $postIds } ) {
    id
    transformedTitle: _objectProperty(
      object: $transformedTitle,
      by: {
        key: $__id
      }
    )
    update(input: {
      title: $__transformedTitle,
      # contentAs: {
      #   html: $__transformedRawContent
      # }
    }) {
      status
      errors {
        __typename
        ...on ErrorPayload {
          message
        }
      }
      post {
        id
        title
        # rawContent
      }
    }
  }
}