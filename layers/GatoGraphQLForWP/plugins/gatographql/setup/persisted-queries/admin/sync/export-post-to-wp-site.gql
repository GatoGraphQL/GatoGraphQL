########################################################################
#
# This Persisted GraphQL query exports a post from this WordPress site
# into some downstream WordPress site.
#
# The Gato GraphQL plugin (free version) must be installed on the
# downstream website.
#
# The resources referenced in the post must all exist in the downstream:
#
#   - The author
#   - The featured image (if any)
#   - The categories
#   - (Tags also, however if these do not already exist, they are created together with the post, so it's not an issue)
#
# As the common identifier for resources between the upstream and downstream sites, we use:
#
#   - Slugs for categories, tags and media items
#   - Usernames for users
#
# If any of the resources does not exist in the downstream site, the GraphQL query prints an error and halts the import.
#
# *********************************************************************
# 
# URL params:
#   - postSlug: The slug of the post to export
#   - downstreamServerGraphQLEndpointURL: The GraphQL endpoint on the downstream WordPress site
#   - username: Credentials on the downstream WordPress site
#   - userPassword: Credentials on the downstream WordPress site
# 
# *********************************************************************
#
# More info:
#   - https://gatographql.com/recipes/distributing-content-from-an-upstream-to-multiple-downstream-sites/
#
########################################################################

query CheckHasPost($postSlug: String!)
{
  post(by: { slug: $postSlug })
    @fail(
      message: "There is no post in the upstream site with the provided slug"
      data: {
        slug: $postSlug
      }
    )
  {
    rawTitle
      @export(as: "postTitle")
    rawContent
      @export(as: "postContent")
  }

  isMissingPostInUpstream: _isNull(value: $__post)
    @export(as: "isMissingPostInUpstream")
}

############################################################
# (By default) Append "/graphql" to the domain, to point
# to that site's GraphQL single endpoint
############################################################
query ExportDownstreamGraphQLQuery(
  $update: Boolean! = false
)
  @depends(on: "CheckHasPost")
  @skip(if: $isMissingPostInUpstream)
{
  query: _echo(value: """

mutation LoginUserAndUpdatePost(
  $update: Boolean! = false
  $username: String!
  $userPassword: String!
  $postSlug: String!
  $postTitle: String!
  $postContent: String!
) {
  loginUser(by: {
    credentials: {
      usernameOrEmail: $username,
      password: $userPassword
    }
  }) {
    userID
  }

  post(by: {slug: $postSlug})
    @include(if: $update)
  {
    update(input: {
      title: $postTitle,
      contentAs: { html: $postContent },
    }) {
      status
      errors {
        __typename
        ...on ErrorPayload {
          message
        }
      }
      post {
        title
        slug
        content
        status
      }
    }
  }

  createPost(input: {
    title: $postTitle,
    slug: $postSlug,
    contentAs: { html: $postContent },
    status: draft
  })
    @skip(if: $update)
  {
    status
    errors {
      __typename
      ...on ErrorPayload {
        message
      }
    }
    post {
      title
      slug
      content
      status
    }
  }
}

    """
  )
    @export(as: "query")
    @remove
}

query SendGraphQLHTTPRequest(
  $downstreamServerGraphQLEndpointURL: String!
  $update: Boolean! = false
  $username: String!
  $userPassword: String!
  $postSlug: String!
)
  @depends(on: "ExportDownstreamGraphQLQuery")
  @skip(if: $isMissingPostInUpstream)
{
  _sendGraphQLHTTPRequest(
    input: {
      endpoint: $downstreamServerGraphQLEndpointURL,
      query: $query,
      variables: [
        {
          name: "update",
          value: $update
        },
        {
          name: "username",
          value: $username
        },
        {
          name: "userPassword",
          value: $userPassword
        },
        {
          name: "postSlug",
          value: $postSlug
        },
        {
          name: "postTitle",
          value: $postTitle
        },
        {
          name: "postContent",
          value: $postContent
        }
      ]
    }
  )
}