(window.webpackJsonpGatoGraphQLSchemaConfigurationAdditionalDocumentation=window.webpackJsonpGatoGraphQLSchemaConfigurationAdditionalDocumentation||[]).push([[27],{73:function(s,a){s.exports='<h1 id="meta-directives">Meta Directives</h1> <p>Addition of meta directives <code>@if</code>, <code>@unless</code>, <code>@forEach</code>, <code>@underArrayItem</code> and <code>@underJSONObjectProperty</code> (which modify the behavior of nested directives) to the GraphQL schema</p> <h2 id="description">Description</h2> <p>ðŸ“£ <em>Please read the documentation for module &quot;Composable Directives&quot; to understand what meta directives are, and how to use them.</em></p> <p>This module introduces these meta-directives into the GraphQL schema:</p> <ol> <li><code>@if</code></li> <li><code>@unless</code></li> <li><code>@forEach</code></li> <li><code>@underArrayItem</code></li> <li><code>@underJSONObjectProperty</code></li> </ol> <h2 id="if">@if</h2> <p><code>@if</code> executes its nested directives only if a condition has value <code>true</code>.</p> <p>In this query, only certain users get their name converted to upper case:</p> <pre><code class="hljs language-graphql"><span class="hljs"><span class="hljs-keyword">query</span> <span class="hljs-punctuation">{</span>\n  users <span class="hljs-punctuation">{</span>\n    name\n      <span class="hljs-meta">@passOnwards</span><span class="hljs-punctuation">(</span><span class="hljs-symbol">as</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;userName&quot;</span><span class="hljs-punctuation">)</span>\n      <span class="hljs-meta">@applyField</span><span class="hljs-punctuation">(</span>\n        <span class="hljs-symbol">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_inArray&quot;</span>\n        <span class="hljs-symbol">arguments</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n          <span class="hljs-symbol">value</span><span class="hljs-punctuation">:</span> <span class="hljs-variable">$userName</span>\n          <span class="hljs-symbol">array</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;Leo&quot;</span>, <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Peter&quot;</span><span class="hljs-punctuation">]</span>\n        <span class="hljs-punctuation">}</span>\n        <span class="hljs-symbol">passOnwardsAs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;isSpecialUser&quot;</span>\n      <span class="hljs-punctuation">)</span>\n      <span class="hljs-meta">@if</span><span class="hljs-punctuation">(</span>\n        <span class="hljs-symbol">condition</span><span class="hljs-punctuation">:</span> <span class="hljs-variable">$isSpecialUser</span>\n      <span class="hljs-punctuation">)</span>\n        <span class="hljs-meta">@strUpperCase</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <p>...producing:</p> <pre><code class="hljs language-json"><span class="hljs"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n    <span class="hljs-attr">&quot;users&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\n      <span class="hljs-punctuation">{</span>\n        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LEO&quot;</span>\n      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>\n      <span class="hljs-punctuation">{</span>\n        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Martin&quot;</span>\n      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>\n      <span class="hljs-punctuation">{</span>\n        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PETER&quot;</span>\n      <span class="hljs-punctuation">}</span>\n    <span class="hljs-punctuation">]</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <h2 id="unless">@unless</h2> <p>Similar to <code>@if</code>, but it executes the nested directives when the condition is <code>false</code>.</p> <h2 id="foreach">@forEach</h2> <p><code>@forEach</code> iterates over a list of elements from the queried entity, and passes a reference to the iterated element to the nested directive(s).</p> <p>For instance, field <code>Post.categoryNames</code> is of type <code>[String]</code>. Using <code>@forEach</code>, we can iterate the category names and apply an operation to each of them via some nested directive.</p> <p>In this query, the post categories are translated from English to French:</p> <pre><code class="hljs language-graphql"><span class="hljs"><span class="hljs-keyword">query</span> <span class="hljs-punctuation">{</span>\n  posts <span class="hljs-punctuation">{</span>\n    id\n    title\n    categoryNames\n      <span class="hljs-meta">@forEach</span>\n        <span class="hljs-meta">@strTranslate</span><span class="hljs-punctuation">(</span>\n          <span class="hljs-symbol">from</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;en&quot;</span>,\n          <span class="hljs-symbol">to</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fr&quot;</span>\n        <span class="hljs-punctuation">)</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <p><code>@forEach</code> can also operate on <code>JSONObject</code> elements. In this query, we iterate all entries in the JSON object and replace any <code>null</code> entry with an empty string:</p> <pre><code class="hljs language-graphql"><span class="hljs"><span class="hljs-punctuation">{</span>\n  _echo<span class="hljs-punctuation">(</span>\n    <span class="hljs-symbol">value</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n      <span class="hljs-symbol">first</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hello&quot;</span>,\n      <span class="hljs-symbol">second</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;world&quot;</span>,\n      <span class="hljs-symbol">third</span><span class="hljs-punctuation">:</span> <span class="hljs-literal">null</span>\n    <span class="hljs-punctuation">}</span>\n  <span class="hljs-punctuation">)</span>\n    <span class="hljs-meta">@forEach</span>\n      <span class="hljs-meta">@default</span><span class="hljs-punctuation">(</span><span class="hljs-symbol">value</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">)</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <p>...producing:</p> <pre><code class="hljs language-json"><span class="hljs"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n    <span class="hljs-attr">&quot;_echo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n      <span class="hljs-attr">&quot;first&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;hello&quot;</span><span class="hljs-punctuation">,</span>\n      <span class="hljs-attr">&quot;second&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;world&quot;</span><span class="hljs-punctuation">,</span>\n      <span class="hljs-attr">&quot;third&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span>\n    <span class="hljs-punctuation">}</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <p>Used with the <strong>Dynamic Variables</strong> feature, <code>@forEach</code> can pass both the key and the value it is iterating on as a dynamic variable to its nested directive(s), via directive args <code>passKeyOnwardsAs</code> and <code>passValueOnwardsAs</code>. It works both when iterating arrays and <code>JSON</code> objects.</p> <p>This query demonstrates this feature:</p> <pre><code class="hljs language-graphql"><span class="hljs"><span class="hljs-punctuation">{</span>\n  <span class="hljs-symbol">withArray</span><span class="hljs-punctuation">:</span> _echo<span class="hljs-punctuation">(</span><span class="hljs-symbol">value</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;second&quot;</span>, <span class="hljs-string">&quot;third&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">)</span>\n    <span class="hljs-meta">@forEach</span><span class="hljs-punctuation">(</span>\n      <span class="hljs-symbol">passKeyOnwardsAs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key&quot;</span>\n      <span class="hljs-symbol">passValueOnwardsAs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value&quot;</span>\n    <span class="hljs-punctuation">)</span>\n      <span class="hljs-meta">@applyField</span><span class="hljs-punctuation">(</span>\n        <span class="hljs-symbol">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_echo&quot;</span>\n        <span class="hljs-symbol">arguments</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n          <span class="hljs-symbol">value</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n            <span class="hljs-symbol">key</span><span class="hljs-punctuation">:</span> <span class="hljs-variable">$key</span>,\n            <span class="hljs-symbol">value</span><span class="hljs-punctuation">:</span> <span class="hljs-variable">$value</span>\n          <span class="hljs-punctuation">}</span>\n        <span class="hljs-punctuation">}</span>,\n        <span class="hljs-symbol">setResultInResponse</span><span class="hljs-punctuation">:</span> <span class="hljs-literal">true</span>\n      <span class="hljs-punctuation">)</span>\n\n  <span class="hljs-symbol">withObject</span><span class="hljs-punctuation">:</span> _echo<span class="hljs-punctuation">(</span><span class="hljs-symbol">value</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n    <span class="hljs-symbol">uno</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first&quot;</span>,\n    <span class="hljs-symbol">dos</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second&quot;</span>,\n    <span class="hljs-symbol">tres</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;third&quot;</span>\n  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">)</span>\n    <span class="hljs-meta">@forEach</span><span class="hljs-punctuation">(</span>\n      <span class="hljs-symbol">passKeyOnwardsAs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;key&quot;</span>\n      <span class="hljs-symbol">passValueOnwardsAs</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;value&quot;</span>\n    <span class="hljs-punctuation">)</span>\n      <span class="hljs-meta">@applyField</span><span class="hljs-punctuation">(</span>\n        <span class="hljs-symbol">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;_echo&quot;</span>\n        <span class="hljs-symbol">arguments</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n          <span class="hljs-symbol">value</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n            <span class="hljs-symbol">key</span><span class="hljs-punctuation">:</span> <span class="hljs-variable">$key</span>,\n            <span class="hljs-symbol">value</span><span class="hljs-punctuation">:</span> <span class="hljs-variable">$value</span>\n          <span class="hljs-punctuation">}</span>\n        <span class="hljs-punctuation">}</span>,\n        <span class="hljs-symbol">setResultInResponse</span><span class="hljs-punctuation">:</span> <span class="hljs-literal">true</span>\n      <span class="hljs-punctuation">)</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <p>The result is:</p> <pre><code class="hljs language-json"><span class="hljs"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n    <span class="hljs-attr">&quot;withArray&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\n      <span class="hljs-punctuation">{</span>\n        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>\n        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first&quot;</span>\n      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>\n      <span class="hljs-punctuation">{</span>\n        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>\n        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second&quot;</span>\n      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>\n      <span class="hljs-punctuation">{</span>\n        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>\n        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;third&quot;</span>\n      <span class="hljs-punctuation">}</span>\n    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>\n    <span class="hljs-attr">&quot;withObject&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n      <span class="hljs-attr">&quot;uno&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;uno&quot;</span><span class="hljs-punctuation">,</span>\n        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;first&quot;</span>\n      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>\n      <span class="hljs-attr">&quot;dos&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dos&quot;</span><span class="hljs-punctuation">,</span>\n        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;second&quot;</span>\n      <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>\n      <span class="hljs-attr">&quot;tres&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n        <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tres&quot;</span><span class="hljs-punctuation">,</span>\n        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;third&quot;</span>\n      <span class="hljs-punctuation">}</span>\n    <span class="hljs-punctuation">}</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <h2 id="underarrayitem">@underArrayItem</h2> <p><code>@underArrayItem</code> makes the next directive be applied on a specific item from the array.</p> <p>In the query below, only the first item in the array with the category names is transformed to uppercase:</p> <pre><code class="hljs language-graphql"><span class="hljs"><span class="hljs-keyword">query</span> <span class="hljs-punctuation">{</span>\n  posts <span class="hljs-punctuation">{</span>\n    categoryNames\n      <span class="hljs-meta">@underArrayItem</span><span class="hljs-punctuation">(</span><span class="hljs-symbol">index</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">)</span>\n        <span class="hljs-meta">@strUpperCase</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <p>...producing:</p> <pre><code class="hljs language-json"><span class="hljs"><span class="hljs-punctuation">{</span>\n  <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n    <span class="hljs-attr">&quot;posts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>\n      <span class="hljs-attr">&quot;categoryNames&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>\n        <span class="hljs-string">&quot;NEWS&quot;</span><span class="hljs-punctuation">,</span>\n        <span class="hljs-string">&quot;sports&quot;</span>\n      <span class="hljs-punctuation">]</span>\n    <span class="hljs-punctuation">}</span>\n  <span class="hljs-punctuation">}</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <h2 id="underjsonobjectproperty">@underJSONObjectProperty</h2> <p><code>@underJSONObjectProperty</code> makes the next directive receive an entry from the queried JSON object. This directive is particularly useful to extract and manipulate a desired piece of data after querying an external API, which will quite likely have a generic <code>JSONObject</code> type (as when using function field <code>_sendJSONObjectItemHTTPRequest</code>).</p> <p>In the query below, we obtain a JSON object coming from the WP REST API, and we use <code>@underJSONObjectProperty</code> to manipulate the response&#39;s <code>type</code> property, transforming it to upper case:</p> <pre><code class="hljs language-graphql"><span class="hljs"><span class="hljs-keyword">query</span> <span class="hljs-punctuation">{</span>\n  <span class="hljs-symbol">postData</span><span class="hljs-punctuation">:</span> _sendJSONObjectItemHTTPRequest<span class="hljs-punctuation">(</span>\n    <span class="hljs-symbol">url</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://newapi.getpop.org/wp-json/wp/v2/posts/1/?_fields=id,type,title,date&quot;</span>\n  <span class="hljs-punctuation">)</span>\n    <span class="hljs-meta">@underJSONObjectProperty</span><span class="hljs-punctuation">(</span><span class="hljs-symbol">by</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span> <span class="hljs-symbol">key</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;type&quot;</span> <span class="hljs-punctuation">}</span><span class="hljs-punctuation">)</span>\n      <span class="hljs-meta">@strUpperCase</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <p>In addition to receiving a <code>&quot;key&quot;</code> to point to a property that lives on the first level of the JSON object, this directive can also receive a <code>&quot;path&quot;</code> to navigate within the inner structure of the object, using <code>.</code> as a separator across levels.</p> <p>In the query below, the WP REST API endpoint for a post provides property <code>&quot;title.rendered&quot;</code>. We can navigate to that actual subelement, and transform it to title case:</p> <pre><code class="hljs language-graphql"><span class="hljs"><span class="hljs-keyword">query</span> <span class="hljs-punctuation">{</span>\n  <span class="hljs-symbol">postData</span><span class="hljs-punctuation">:</span> _sendJSONObjectItemHTTPRequest<span class="hljs-punctuation">(</span>\n    <span class="hljs-symbol">url</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://newapi.getpop.org/wp-json/wp/v2/posts/1/?_fields=id,type,title,date&quot;</span>\n  <span class="hljs-punctuation">)</span>\n    <span class="hljs-meta">@underJSONObjectProperty</span><span class="hljs-punctuation">(</span><span class="hljs-symbol">by</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span> <span class="hljs-symbol">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;title.rendered&quot;</span> <span class="hljs-punctuation">}</span><span class="hljs-punctuation">)</span>\n      <span class="hljs-meta">@strTitleCase</span>\n<span class="hljs-punctuation">}</span></span></code></pre> <h2 id="further-examples">Further examples</h2> <p>In this query, <code>@forEach</code> wraps <code>@underJSONObjectProperty</code>, which itself wraps <code>@strUpperCase</code>, transforming the <code>&quot;title.rendered&quot;</code> property into upper case, for the multiple post entries obtained via the WP REST API:</p> <pre><code class="hljs language-graphql"><span class="hljs"><span class="hljs-keyword">query</span> <span class="hljs-punctuation">{</span>\n  <span class="hljs-symbol">postListData</span><span class="hljs-punctuation">:</span> _sendJSONObjectCollectionHTTPRequest<span class="hljs-punctuation">(</span>\n    <span class="hljs-symbol">url</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://newapi.getpop.org/wp-json/wp/v2/posts/?per_page=3&amp;_fields=id,type,title,date&quot;</span>\n  <span class="hljs-punctuation">)</span>\n    <span class="hljs-meta">@forEach</span>\n      <span class="hljs-meta">@underJSONObjectProperty</span><span class="hljs-punctuation">(</span><span class="hljs-symbol">by</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span> <span class="hljs-symbol">path</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;title.rendered&quot;</span> <span class="hljs-punctuation">}</span><span class="hljs-punctuation">)</span>\n        <span class="hljs-meta">@strUpperCase</span>\n<span class="hljs-punctuation">}</span></span></code></pre> '}}]);