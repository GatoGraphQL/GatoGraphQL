query {
  customPosts(filter: { ids: [1, 2, 1113] }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      areCommentsOpen
      author {
        id
        name
      }
      commentCount
      comments {
        id
      }
      content
      customPostType
      date
      dateStr
      excerpt
      ...on WithFeaturedImage {
        featuredImage {
          id
          src
        }
      }
      hasComments
      ...on WithFeaturedImage {
        hasFeaturedImage
      }
      id
      isStatus(status: pending)
      menuOrder
      metaValue(key: "_thumbnail_id")
      metaValue2: metaValue(key: "_wp_page_template")
      meta(keys: ["_thumbnail_id", "_wp_page_template"])
      metaKeys
      includingMetaKeys: metaKeys(filter: { include: ["_thumbnail_id", "_edit_last"] })
      excludingMetaKeys: metaKeys(filter: { exclude: ["_thumbnail_id", "_edit_last"] })
      includingAndExcludingMetaKeys: metaKeys(filter: { include: ["_thumbnail_id", "_edit_last", "_wp_page_template"], exclude: ["_edit_last", "_wp_page_template"] })
      # These ones produce the value of data being inserted to DB, so can't save fixed value for testing
      # modifiedDate
      # modifiedDateStr(format: "m-d")
      rawContent
      slug
      status
      title
      url
      urlPath
      slugPath
    }
  }

  customPostsByAuthorIDs: customPosts(filter: { author: { ids: 5 } }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByAuthorSlug: customPosts(filter: { author: { slug: "blogger" } }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByCustomPostTypes: customPosts(filter: { customPostTypes: "page" }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByDateQuery: customPosts(filter: { dateQuery: { before: "2020-04-20" } }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByExcludeAuthorIDs: customPosts(filter: { author: { excludeIDs: 4 } }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByExcludeIDs: customPosts(filter: { excludeIDs: [1, 1128] }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByHasPassword: customPosts(filter: { hasPassword: true }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  emptyCustomPostsByIds: customPosts(filter: { ids: [] }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByIds: customPosts(filter: { ids: [1, 1128] }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByMetaQuery: customPosts(filter: { metaQuery: { key: "_thumbnail_id", compareBy: { key: { operator: EXISTS } } } }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByPassword: customPosts(filter: { password: "password" }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsBySearch: customPosts(filter: { search: "hello" }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsByStatus: customPosts(filter: { status: draft }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsBySlugs: customPosts(sort: { by: ID, order: ASC }, filter: { slugs: ["hello-world", "non-existing", "released-v0-6-check-it-out", "graphql-api-search-results"] }) {
    id
    title
    slug
  }
  
  customPostsSortedASC: customPosts(pagination: { limit: 3 }, sort: { by: TITLE, order: ASC}) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsSortedDESC: customPosts(pagination: { limit: 3 }, sort: { by: TITLE, order: DESC}) {
    __typename
    ...on CustomPost {
      id
      title
    }
  }
  customPostsWithSlugPath: customPosts(filter: { ids: [1682, 1684, 1688] }, sort: { by: ID, order: ASC }) {
    __typename
    ...on CustomPost {
      id
      title
      slugPath
    }
  }

  singleCustomPost: customPost(by: { id: 1619 }) {
    __typename
    ...on CustomPost {
      id
      title
      content
      customPostType
    }
  }
}
